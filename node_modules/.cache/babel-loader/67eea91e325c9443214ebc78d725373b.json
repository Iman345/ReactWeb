{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Documents\\\\GitHub\\\\ReactWeb\\\\app_1\\\\src\\\\pages\\\\board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Tile from \"../pages/tiles\";\nimport { TILE_COUNT, GRID_SIZE, BOARD_SIZE } from \"../pages/constants\";\nimport { canSwap, shuffle, swap, isSolved } from \"../pages/helper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Board({\n  imgUrl\n}) {\n  _s();\n\n  const [tiles, setTiles] = useState([...Array(TILE_COUNT).keys()]);\n  const [isStarted, setIsStarted] = useState(false);\n  console.log('is started:', isStarted);\n\n  const shuffleTiles = () => {\n    const shuffledTiles = shuffle(tiles);\n    setTiles(shuffledTiles);\n  };\n\n  const swapTiles = tileIndex => {\n    if (canSwap(tileIndex, tiles.indexOf(tiles.length - 1))) {\n      const swappedTiles = swap(tiles, tileIndex, tiles.indexOf(tiles.length - 1));\n      setTiles(swappedTiles);\n    }\n  };\n\n  const handleTileClick = index => {\n    swapTiles(index);\n  };\n\n  const handleShuffleClick = () => {\n    shuffleTiles();\n  };\n\n  const handleStartClick = () => {\n    shuffleTiles();\n    setIsStarted(true);\n  };\n\n  const pieceWidth = Math.round(BOARD_SIZE / GRID_SIZE);\n  const pieceHeight = Math.round(BOARD_SIZE / GRID_SIZE);\n  const style = {\n    width: BOARD_SIZE,\n    height: BOARD_SIZE\n  };\n  const hasWon = isSolved(tiles);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      style: style,\n      className: \"board\",\n      children: tiles.map((tile, index) => /*#__PURE__*/_jsxDEV(Tile, {\n        index: index,\n        imgUrl: imgUrl,\n        tile: tile,\n        width: pieceWidth,\n        height: pieceHeight,\n        handleTileClick: handleTileClick\n      }, tile, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), hasWon && isStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Puzzle solved \\uD83E\\uDDE0 \\uD83C\\uDF89\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 31\n    }, this), !isStarted ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleStartClick(),\n      children: \"Start game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 10\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleShuffleClick(),\n      children: \"Restart game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Board, \"5+dhD0Wb6Y93+3dxRKkjziPlfbk=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/Administrator/Documents/GitHub/ReactWeb/app_1/src/pages/board.js"],"names":["React","useState","Tile","TILE_COUNT","GRID_SIZE","BOARD_SIZE","canSwap","shuffle","swap","isSolved","Board","imgUrl","tiles","setTiles","Array","keys","isStarted","setIsStarted","console","log","shuffleTiles","shuffledTiles","swapTiles","tileIndex","indexOf","length","swappedTiles","handleTileClick","index","handleShuffleClick","handleStartClick","pieceWidth","Math","round","pieceHeight","style","width","height","hasWon","map","tile"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport Tile from \"../pages/tiles\";\r\nimport { TILE_COUNT, GRID_SIZE, BOARD_SIZE } from \"../pages/constants\"\r\nimport { canSwap, shuffle, swap, isSolved } from \"../pages/helper\"\r\n\r\nfunction Board({ imgUrl }) {\r\n  const [tiles, setTiles] = useState([...Array(TILE_COUNT).keys()]);\r\n  const [isStarted, setIsStarted] = useState(false);\r\n  console.log('is started:', isStarted)\r\n\r\n  const shuffleTiles = () => {\r\n    const shuffledTiles = shuffle(tiles)\r\n    setTiles(shuffledTiles);\r\n  }\r\n\r\n  const swapTiles = (tileIndex) => {\r\n    if (canSwap(tileIndex, tiles.indexOf(tiles.length - 1))) {\r\n      const swappedTiles = swap(tiles, tileIndex, tiles.indexOf(tiles.length - 1))\r\n      setTiles(swappedTiles)\r\n    }\r\n  }\r\n\r\n  const handleTileClick = (index) => {\r\n    swapTiles(index)\r\n  }\r\n\r\n  const handleShuffleClick = () => {\r\n    shuffleTiles()\r\n  }\r\n\r\n  const handleStartClick = () => {\r\n    shuffleTiles()\r\n    setIsStarted(true)\r\n  }\r\n\r\n  const pieceWidth = Math.round(BOARD_SIZE / GRID_SIZE);\r\n  const pieceHeight = Math.round(BOARD_SIZE / GRID_SIZE);\r\n  const style = {\r\n    width: BOARD_SIZE,\r\n    height: BOARD_SIZE,\r\n  };\r\n  const hasWon = isSolved(tiles)\r\n\r\n  return (\r\n    <>\r\n      <ul style={style} className=\"board\">\r\n        {tiles.map((tile, index) => (\r\n          <Tile\r\n            key={tile}\r\n            index={index}\r\n            imgUrl={imgUrl}\r\n            tile={tile}\r\n            width={pieceWidth}\r\n            height={pieceHeight}\r\n            handleTileClick={handleTileClick}\r\n          />\r\n        ))}\r\n      </ul>\r\n      {hasWon && isStarted && <div>Puzzle solved ðŸ§  ðŸŽ‰</div>}\r\n      {!isStarted ?\r\n        (<button onClick={() => handleStartClick()}>Start game</button>) :\r\n        (<button onClick={() => handleShuffleClick()}>Restart game</button>)}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Board;"]},"metadata":{},"sourceType":"module"}