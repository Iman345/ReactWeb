{"ast":null,"code":"import { TILE_COUNT, GRID_SIZE } from \"../pages/constants\"; // Credits to https://codepen.io/unindented/pen/QNWdRQ\n\nexport function isSolvable(tiles) {\n  let product = 1;\n\n  for (let i = 1, l = TILE_COUNT - 1; i <= l; i++) {\n    for (let j = i + 1, m = l + 1; j <= m; j++) {\n      product *= (tiles[i - 1] - tiles[j - 1]) / (i - j);\n    }\n  }\n\n  return Math.round(product) === 1;\n}\nexport function isSolved(tiles) {\n  for (let i = 0, l = tiles.length; i < l; i++) {\n    if (tiles[i] !== i) {\n      return false;\n    }\n  }\n\n  return true;\n} // Get the linear index from a row/col pair.\n\nexport function getIndex(row, col) {\n  return parseInt(row, 10) * GRID_SIZE + parseInt(col, 10);\n} // Get the row/col pair from a linear index.\n\nexport function getMatrixPosition(index) {\n  return {\n    row: Math.floor(index / GRID_SIZE),\n    col: index % GRID_SIZE\n  };\n}\nexport function getVisualPosition(row, col, width, height) {\n  return {\n    x: col * width,\n    y: row * height\n  };\n}\nexport function shuffle(tiles) {\n  const shuffledTiles = [...tiles.filter(t => t !== tiles.length - 1).sort(() => Math.random() - 0.5), tiles.length - 1];\n  return isSolvable(shuffledTiles) && !isSolved(shuffledTiles) ? shuffledTiles : shuffle(shuffledTiles);\n}\nexport function canSwap(srcIndex, destIndex) {\n  const {\n    row: srcRow,\n    col: srcCol\n  } = getMatrixPosition(srcIndex);\n  const {\n    row: destRow,\n    col: destCol\n  } = getMatrixPosition(destIndex);\n  return Math.abs(srcRow - destRow) + Math.abs(srcCol - destCol) === 1;\n}\nexport function swap(tiles, src, dest) {\n  const tilesResult = [...tiles];\n  [tilesResult[src], tilesResult[dest]] = [tilesResult[dest], tilesResult[src]];\n  return tilesResult;\n}\nexport function updateURLParameter(url, param, paramVal) {\n  var newAdditionalURL = \"\";\n  var tempArray = url.split(\"?\");\n  var baseURL = tempArray[0];\n  var additionalURL = tempArray[1];\n  var temp = \"\";\n\n  if (additionalURL) {\n    tempArray = additionalURL.split(\"&\");\n\n    for (var i = 0; i < tempArray.length; i++) {\n      if (tempArray[i].split(\"=\")[0] !== param) {\n        newAdditionalURL += temp + tempArray[i];\n        temp = \"&\";\n      }\n    }\n  }\n\n  var rows_txt = temp + \"\" + param + \"=\" + paramVal;\n  return baseURL + \"?\" + newAdditionalURL + rows_txt;\n}","map":{"version":3,"sources":["C:/Users/Administrator/Documents/GitHub/ReactWeb/app_1/src/pages/helper.js"],"names":["TILE_COUNT","GRID_SIZE","isSolvable","tiles","product","i","l","j","m","Math","round","isSolved","length","getIndex","row","col","parseInt","getMatrixPosition","index","floor","getVisualPosition","width","height","x","y","shuffle","shuffledTiles","filter","t","sort","random","canSwap","srcIndex","destIndex","srcRow","srcCol","destRow","destCol","abs","swap","src","dest","tilesResult","updateURLParameter","url","param","paramVal","newAdditionalURL","tempArray","split","baseURL","additionalURL","temp","rows_txt"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,SAArB,QAAsC,oBAAtC,C,CAEA;;AACA,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAChC,MAAIC,OAAO,GAAG,CAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGN,UAAU,GAAG,CAAjC,EAAoCK,CAAC,IAAIC,CAAzC,EAA4CD,CAAC,EAA7C,EAAiD;AAC/C,SAAK,IAAIE,CAAC,GAAGF,CAAC,GAAG,CAAZ,EAAeG,CAAC,GAAGF,CAAC,GAAG,CAA5B,EAA+BC,CAAC,IAAIC,CAApC,EAAuCD,CAAC,EAAxC,EAA4C;AAC1CH,MAAAA,OAAO,IAAI,CAACD,KAAK,CAACE,CAAC,GAAG,CAAL,CAAL,GAAeF,KAAK,CAACI,CAAC,GAAG,CAAL,CAArB,KAAiCF,CAAC,GAAGE,CAArC,CAAX;AACD;AACF;;AACD,SAAOE,IAAI,CAACC,KAAL,CAAWN,OAAX,MAAwB,CAA/B;AACD;AAED,OAAO,SAASO,QAAT,CAAkBR,KAAlB,EAAyB;AAC9B,OAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGH,KAAK,CAACS,MAA1B,EAAkCP,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,QAAIF,KAAK,CAACE,CAAD,CAAL,KAAaA,CAAjB,EAAoB;AAClB,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD,C,CAED;;AACA,OAAO,SAASQ,QAAT,CAAkBC,GAAlB,EAAuBC,GAAvB,EAA4B;AACjC,SAAOC,QAAQ,CAACF,GAAD,EAAM,EAAN,CAAR,GAAoBb,SAApB,GAAgCe,QAAQ,CAACD,GAAD,EAAM,EAAN,CAA/C;AACD,C,CAED;;AACA,OAAO,SAASE,iBAAT,CAA2BC,KAA3B,EAAkC;AACvC,SAAO;AACLJ,IAAAA,GAAG,EAAEL,IAAI,CAACU,KAAL,CAAWD,KAAK,GAAGjB,SAAnB,CADA;AAELc,IAAAA,GAAG,EAAEG,KAAK,GAAGjB;AAFR,GAAP;AAID;AAED,OAAO,SAASmB,iBAAT,CAA2BN,GAA3B,EAAgCC,GAAhC,EAAqCM,KAArC,EAA4CC,MAA5C,EAAoD;AACzD,SAAO;AACLC,IAAAA,CAAC,EAAER,GAAG,GAAGM,KADJ;AAELG,IAAAA,CAAC,EAAEV,GAAG,GAAGQ;AAFJ,GAAP;AAID;AAED,OAAO,SAASG,OAAT,CAAiBtB,KAAjB,EAAwB;AAC7B,QAAMuB,aAAa,GAAG,CACpB,GAAGvB,KAAK,CACLwB,MADA,CACQC,CAAD,IAAOA,CAAC,KAAKzB,KAAK,CAACS,MAAN,GAAe,CADnC,EAEAiB,IAFA,CAEK,MAAMpB,IAAI,CAACqB,MAAL,KAAgB,GAF3B,CADiB,EAIpB3B,KAAK,CAACS,MAAN,GAAe,CAJK,CAAtB;AAMA,SAAOV,UAAU,CAACwB,aAAD,CAAV,IAA6B,CAACf,QAAQ,CAACe,aAAD,CAAtC,GACHA,aADG,GAEHD,OAAO,CAACC,aAAD,CAFX;AAGD;AAED,OAAO,SAASK,OAAT,CAAiBC,QAAjB,EAA2BC,SAA3B,EAAsC;AAC3C,QAAM;AAAEnB,IAAAA,GAAG,EAAEoB,MAAP;AAAenB,IAAAA,GAAG,EAAEoB;AAApB,MAA+BlB,iBAAiB,CAACe,QAAD,CAAtD;AACA,QAAM;AAAElB,IAAAA,GAAG,EAAEsB,OAAP;AAAgBrB,IAAAA,GAAG,EAAEsB;AAArB,MAAiCpB,iBAAiB,CAACgB,SAAD,CAAxD;AACA,SAAOxB,IAAI,CAAC6B,GAAL,CAASJ,MAAM,GAAGE,OAAlB,IAA6B3B,IAAI,CAAC6B,GAAL,CAASH,MAAM,GAAGE,OAAlB,CAA7B,KAA4D,CAAnE;AACD;AAED,OAAO,SAASE,IAAT,CAAcpC,KAAd,EAAqBqC,GAArB,EAA0BC,IAA1B,EAAgC;AACrC,QAAMC,WAAW,GAAG,CAAC,GAAGvC,KAAJ,CAApB;AACA,GAACuC,WAAW,CAACF,GAAD,CAAZ,EAAmBE,WAAW,CAACD,IAAD,CAA9B,IAAwC,CAACC,WAAW,CAACD,IAAD,CAAZ,EAAoBC,WAAW,CAACF,GAAD,CAA/B,CAAxC;AACA,SAAOE,WAAP;AACD;AAED,OAAO,SAASC,kBAAT,CAA4BC,GAA5B,EAAiCC,KAAjC,EAAwCC,QAAxC,EAAkD;AACvD,MAAIC,gBAAgB,GAAG,EAAvB;AACA,MAAIC,SAAS,GAAGJ,GAAG,CAACK,KAAJ,CAAU,GAAV,CAAhB;AACA,MAAIC,OAAO,GAAGF,SAAS,CAAC,CAAD,CAAvB;AACA,MAAIG,aAAa,GAAGH,SAAS,CAAC,CAAD,CAA7B;AACA,MAAII,IAAI,GAAG,EAAX;;AACA,MAAID,aAAJ,EAAmB;AACjBH,IAAAA,SAAS,GAAGG,aAAa,CAACF,KAAd,CAAoB,GAApB,CAAZ;;AACA,SAAK,IAAI5C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2C,SAAS,CAACpC,MAA9B,EAAsCP,CAAC,EAAvC,EAA2C;AACzC,UAAI2C,SAAS,CAAC3C,CAAD,CAAT,CAAa4C,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,MAA+BJ,KAAnC,EAA0C;AACxCE,QAAAA,gBAAgB,IAAIK,IAAI,GAAGJ,SAAS,CAAC3C,CAAD,CAApC;AACA+C,QAAAA,IAAI,GAAG,GAAP;AACD;AACF;AACF;;AAED,MAAIC,QAAQ,GAAGD,IAAI,GAAG,EAAP,GAAYP,KAAZ,GAAoB,GAApB,GAA0BC,QAAzC;AACA,SAAOI,OAAO,GAAG,GAAV,GAAgBH,gBAAhB,GAAmCM,QAA1C;AACD","sourcesContent":["import { TILE_COUNT, GRID_SIZE } from \"../pages/constants\"\r\n\r\n// Credits to https://codepen.io/unindented/pen/QNWdRQ\r\nexport function isSolvable(tiles) {\r\n  let product = 1;\r\n  for (let i = 1, l = TILE_COUNT - 1; i <= l; i++) {\r\n    for (let j = i + 1, m = l + 1; j <= m; j++) {\r\n      product *= (tiles[i - 1] - tiles[j - 1]) / (i - j);\r\n    }\r\n  }\r\n  return Math.round(product) === 1;\r\n}\r\n\r\nexport function isSolved(tiles) {\r\n  for (let i = 0, l = tiles.length; i < l; i++) {\r\n    if (tiles[i] !== i) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n// Get the linear index from a row/col pair.\r\nexport function getIndex(row, col) {\r\n  return parseInt(row, 10) * GRID_SIZE + parseInt(col, 10);\r\n}\r\n\r\n// Get the row/col pair from a linear index.\r\nexport function getMatrixPosition(index) {\r\n  return {\r\n    row: Math.floor(index / GRID_SIZE),\r\n    col: index % GRID_SIZE,\r\n  };\r\n}\r\n\r\nexport function getVisualPosition(row, col, width, height) {\r\n  return {\r\n    x: col * width,\r\n    y: row * height,\r\n  };\r\n}\r\n\r\nexport function shuffle(tiles) {\r\n  const shuffledTiles = [\r\n    ...tiles\r\n      .filter((t) => t !== tiles.length - 1)\r\n      .sort(() => Math.random() - 0.5),\r\n    tiles.length - 1,\r\n  ];\r\n  return isSolvable(shuffledTiles) && !isSolved(shuffledTiles)\r\n    ? shuffledTiles\r\n    : shuffle(shuffledTiles);\r\n}\r\n\r\nexport function canSwap(srcIndex, destIndex) {\r\n  const { row: srcRow, col: srcCol } = getMatrixPosition(srcIndex);\r\n  const { row: destRow, col: destCol } = getMatrixPosition(destIndex);\r\n  return Math.abs(srcRow - destRow) + Math.abs(srcCol - destCol) === 1;\r\n}\r\n\r\nexport function swap(tiles, src, dest) {\r\n  const tilesResult = [...tiles];\r\n  [tilesResult[src], tilesResult[dest]] = [tilesResult[dest], tilesResult[src]];\r\n  return tilesResult;\r\n}\r\n\r\nexport function updateURLParameter(url, param, paramVal) {\r\n  var newAdditionalURL = \"\";\r\n  var tempArray = url.split(\"?\");\r\n  var baseURL = tempArray[0];\r\n  var additionalURL = tempArray[1];\r\n  var temp = \"\";\r\n  if (additionalURL) {\r\n    tempArray = additionalURL.split(\"&\");\r\n    for (var i = 0; i < tempArray.length; i++) {\r\n      if (tempArray[i].split(\"=\")[0] !== param) {\r\n        newAdditionalURL += temp + tempArray[i];\r\n        temp = \"&\";\r\n      }\r\n    }\r\n  }\r\n\r\n  var rows_txt = temp + \"\" + param + \"=\" + paramVal;\r\n  return baseURL + \"?\" + newAdditionalURL + rows_txt;\r\n}"]},"metadata":{},"sourceType":"module"}